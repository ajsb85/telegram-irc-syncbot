{
  "name": "mocha-jshint",
  "version": "2.3.1",
  "description": "run JSHint as mocha tests",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "keywords": [
    "mocha",
    "jshint"
  ],
  "author": {
    "name": "Allan Ebdrup"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": ""
  },
  "dependencies": {
    "jshint": "^2.8.0",
    "minimatch": "^3.0.0",
    "shelljs": "^0.4.0",
    "uniq": "^1.0.1"
  },
  "directories": {
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ebdrup/mocha-jshint.git"
  },
  "bugs": {
    "url": "https://github.com/ebdrup/mocha-jshint/issues"
  },
  "homepage": "https://github.com/ebdrup/mocha-jshint",
  "readme": "mocha-jshint [![npm version](https://badge.fury.io/js/mocha-jshint.svg)](http://badge.fury.io/js/mocha-jshint) [![Build Status](https://travis-ci.org/ebdrup/mocha-jshint.svg?branch=master)](https://travis-ci.org/ebdrup/mocha-jshint) [![Dependency Status](https://david-dm.org/ebdrup/mocha-jshint.svg)](https://david-dm.org/ebdrup/mocha-jshint) [![devDependency Status](https://david-dm.org/ebdrup/mocha-jshint/dev-status.svg)](https://david-dm.org/ebdrup/mocha-jshint#info=devDependencies)\n------------\n\nRun jshint as Mocha tests.\n\nTo install in your node.js project as devDependency, run this command, in the root of your project\n```\nnpm install mocha-jshint --save-dev\n```\n\nusage\n-----\nMocha defaults to looking for your test specs in the `test` folder of your project.\nAdd this file as `test/jshint.spec.js` in your project, with the following content:\n\n```js\nrequire('mocha-jshint')();\n```\n\nThat is it you are done.\n\nTo grep only the jshint test, just do\n```\nmocha --grep jshint\n```\n\nusing with git\n--------------\nIf you are using git as version control you can do the following in your test:\n```js\nrequire('mocha-jshint')({\n\tgit: {\n\t\tmodified: true,\n\t\tcommits: 2,\n\t\texec: {\n\t\t\tmaxBuffer: 20*1024*1024\n\t\t}\n\t}\n});\n```\nThis means that jshint will only lint the files that are modified on disk according to git, and the files modified in the last \ntwo git commits.\n\nThere is also the `masterDiff` option:\n```js\nrequire('mocha-jshint')({\n\tgit: {\n\t\tmodified: true,\n\t\tcommits: 2,\n\t\tmasterDiff:true\n\t}\n});\n```\nThis means that if we are on any other branch than `master`, only the files changed compared to the `master` branch\nwill be linted.\n\nIf we are on the `master` branch, only the files that are modified on disk according to git, and the files modified in the last \ntwo git commits will be linted.\n\nspecifying paths\n----------------\nNormally I would recommend configuring what to lint with `.jshintignore` described in \n[configuring jshint](https://github.com/ebdrup/mocha-jshint#configuring-jshint). \nAnd just lint the working directory.\n\nBut if you want to specify specific paths to lint, you can do the following in your test:\n```js\nrequire('mocha-jshint')({\n\tpaths: [\n\t\t'/some/path/',\n\t\t'/some/other/path'\n\t]\n});\n```\n\nEach path may be either a file path or a directory path, and should yield a valid file or directory when passed \nthrough `path.resolve()`. Each path listed in the array will be linted on a separate test.\n\nchanging test suite name\n------------------------\nThe default name for the test suite generated by mocha-jshint is **jshint**, but it may be overridden in the following manner:\n```js\nrequire('mocha-jshint')({\n\ttitle: 'My custom test suite name'\n});\n```\n\n\npretty output\n-------------\nFor pretty-printed output, with errors grouped by filename, enable the `pretty` option:\n```js\nrequire('mocha-jshint')({\n\tpretty: true\n});\n```\n\nSample output:\n```\n$ npm test\n  1) jshint should pass for working directory:\n      Found 3 jshint error(s) in 2 file(s):\n           /tmp/abc.js\n                    1:1     Missing semicolon. (W033)\n                   18:0     Identifier 'good_times' is not in camel case. (W106)\n\n           /tmp/xyz.js\n                    3:5     '_' is defined but never used. (W098)\n```\n\nconfiguring jshint\n------------------\nIn the root of your project you can add a `.jshintignore` file, where each line is a file or directory for jshint to ignore\nand not check for errors. (see this project for an example)\n\nAt the root of your project you can add a `.jshintrc` file, that specifies what options you want jshint to run with\n(see this project for an example)\n\nYou can also add a `.jshintrc` file to any subdirectory of your project, to override the .jshintrc settings in the root.\nFor example in this project I allow some global variables in the `test` folder. Global variables that are set when I\nrun mocha tests. Global variables that are only allowed to be used, in the .js files in the test folder\n\nWhy?\n---\nThis module was created to:\n\n- Make adding jshint testing to a project using Mocha as easy as possible\n- Make it easy to piggyback on all the different Mocha reporters (dot, spec, teamcity etc) for jshint output\n- Make sure that you get a click-able link directly to the problem in WebStorm, when jshint fails\n- Make sure that there is no unnecessary noise in the test output\n\nVersion history\n---------------\n2.2: Added `paths` and `title` options.\n\n2.1: Added git `masterDiff` option.\n\n2.0: Added git features. Removed old undocumented paths feature.\n\nLicense\n--------\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "mocha-jshint@2.3.1",
  "_from": "mocha-jshint@^2.2.3"
}
